# import Query.members, Query.TeamConnection, Team from "./generated/prisma.graphql"

directive @isAuthenticated on QUERY | FIELD | MUTATION
directive @hasRole(roles: [String]) on QUERY | FIELD | MUTATION
directive @isOwner(type: String) on QUERY | MUTATION
directive @isOwnerOrHasRole(type: String, roles: [String]) on QUERY | MUTATION

type Query {
  teams: TeamConnection
  teamDetails: [Team!]! @isAuthenticated
  teamByName(name: String!): Team
  teamById(teamId: String!): Team
  teamByOwner(ownerId: String!): TeamConnection
  owner: Member @isAuthenticated
  member(auth0id: String!): Member @isAuthenticated
}

type Mutation {
  authenticate(idToken: String!): Member
  createTeam(name: String!, slug: String, owner: String): Team @isAuthenticated
  deleteTeam(id: ID!): Team @isOwnerOrHasRole(type: "Member", roles: ["OWNER"])
  updateProfile(data: MemberProfileInput): Member @isAuthenticated
}

input MemberProfileInput {
  auth0id: String!
  nickname: String!
  anonymous: Boolean
  visible: Boolean
  avatar: String
  email: String
  repo: String
  bio: String
  status: String
}
