# source: http://localhost:4466
# timestamp: Sat Sep 01 2018 03:46:06 GMT-0700 (Pacific Daylight Time)

type AggregateMember {
  count: Int!
}

type AggregateMemberProfile {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTeamMembers {
  count: Int!
}

type AggregateTeamProfile {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Member implements Node {
  id: ID!
  nickname: String
  teams(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers!]
  profile(where: MemberProfileWhereInput): MemberProfile
  auth0id: String!
  visible: Boolean!
  anonymous: Boolean!
}

"""A connection to a list of items."""
type MemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  nickname: String
  auth0id: String!
  visible: Boolean
  anonymous: Boolean
  teams: TeamMembersCreateManyWithoutMemberInput
  profile: MemberProfileCreateOneInput
}

input MemberCreateOneInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutTeamsInput {
  create: MemberCreateWithoutTeamsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateWithoutTeamsInput {
  nickname: String
  auth0id: String!
  visible: Boolean
  anonymous: Boolean
  profile: MemberProfileCreateOneInput
}

"""An edge in a connection."""
type MemberEdge {
  """The item at the end of the edge."""
  node: Member!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  nickname_ASC
  nickname_DESC
  auth0id_ASC
  auth0id_DESC
  visible_ASC
  visible_DESC
  anonymous_ASC
  anonymous_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MemberPreviousValues {
  id: ID!
  nickname: String
  auth0id: String!
  visible: Boolean!
  anonymous: Boolean!
}

type MemberProfile implements Node {
  id: ID!
  createdAt: DateTime!
  bio: String
  status: String
  avatar: String
  repo: String
  email: String
}

"""A connection to a list of items."""
type MemberProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberProfileEdge]!
  aggregate: AggregateMemberProfile!
}

input MemberProfileCreateInput {
  bio: String
  status: String
  avatar: String
  repo: String
  email: String
}

input MemberProfileCreateOneInput {
  create: MemberProfileCreateInput
  connect: MemberProfileWhereUniqueInput
}

"""An edge in a connection."""
type MemberProfileEdge {
  """The item at the end of the edge."""
  node: MemberProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MemberProfileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  bio_ASC
  bio_DESC
  status_ASC
  status_DESC
  avatar_ASC
  avatar_DESC
  repo_ASC
  repo_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemberProfilePreviousValues {
  id: ID!
  createdAt: DateTime!
  bio: String
  status: String
  avatar: String
  repo: String
  email: String
}

type MemberProfileSubscriptionPayload {
  mutation: MutationType!
  node: MemberProfile
  updatedFields: [String!]
  previousValues: MemberProfilePreviousValues
}

input MemberProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberProfileWhereInput
}

input MemberProfileUpdateDataInput {
  bio: String
  status: String
  avatar: String
  repo: String
  email: String
}

input MemberProfileUpdateInput {
  bio: String
  status: String
  avatar: String
  repo: String
  email: String
}

input MemberProfileUpdateOneInput {
  create: MemberProfileCreateInput
  connect: MemberProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MemberProfileUpdateDataInput
  upsert: MemberProfileUpsertNestedInput
}

input MemberProfileUpsertNestedInput {
  update: MemberProfileUpdateDataInput!
  create: MemberProfileCreateInput!
}

input MemberProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  repo: String

  """All values that are not equal to given value."""
  repo_not: String

  """All values that are contained in given list."""
  repo_in: [String!]

  """All values that are not contained in given list."""
  repo_not_in: [String!]

  """All values less than the given value."""
  repo_lt: String

  """All values less than or equal the given value."""
  repo_lte: String

  """All values greater than the given value."""
  repo_gt: String

  """All values greater than or equal the given value."""
  repo_gte: String

  """All values containing the given string."""
  repo_contains: String

  """All values not containing the given string."""
  repo_not_contains: String

  """All values starting with the given string."""
  repo_starts_with: String

  """All values not starting with the given string."""
  repo_not_starts_with: String

  """All values ending with the given string."""
  repo_ends_with: String

  """All values not ending with the given string."""
  repo_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

input MemberProfileWhereUniqueInput {
  id: ID
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
}

input MemberUpdateDataInput {
  nickname: String
  auth0id: String
  visible: Boolean
  anonymous: Boolean
  teams: TeamMembersUpdateManyWithoutMemberInput
  profile: MemberProfileUpdateOneInput
}

input MemberUpdateInput {
  nickname: String
  auth0id: String
  visible: Boolean
  anonymous: Boolean
  teams: TeamMembersUpdateManyWithoutMemberInput
  profile: MemberProfileUpdateOneInput
}

input MemberUpdateOneInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  delete: Boolean
  update: MemberUpdateDataInput
  upsert: MemberUpsertNestedInput
}

input MemberUpdateOneWithoutTeamsInput {
  create: MemberCreateWithoutTeamsInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MemberUpdateWithoutTeamsDataInput
  upsert: MemberUpsertWithoutTeamsInput
}

input MemberUpdateWithoutTeamsDataInput {
  nickname: String
  auth0id: String
  visible: Boolean
  anonymous: Boolean
  profile: MemberProfileUpdateOneInput
}

input MemberUpsertNestedInput {
  update: MemberUpdateDataInput!
  create: MemberCreateInput!
}

input MemberUpsertWithoutTeamsInput {
  update: MemberUpdateWithoutTeamsDataInput!
  create: MemberCreateWithoutTeamsInput!
}

input MemberWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  nickname: String

  """All values that are not equal to given value."""
  nickname_not: String

  """All values that are contained in given list."""
  nickname_in: [String!]

  """All values that are not contained in given list."""
  nickname_not_in: [String!]

  """All values less than the given value."""
  nickname_lt: String

  """All values less than or equal the given value."""
  nickname_lte: String

  """All values greater than the given value."""
  nickname_gt: String

  """All values greater than or equal the given value."""
  nickname_gte: String

  """All values containing the given string."""
  nickname_contains: String

  """All values not containing the given string."""
  nickname_not_contains: String

  """All values starting with the given string."""
  nickname_starts_with: String

  """All values not starting with the given string."""
  nickname_not_starts_with: String

  """All values ending with the given string."""
  nickname_ends_with: String

  """All values not ending with the given string."""
  nickname_not_ends_with: String
  auth0id: String

  """All values that are not equal to given value."""
  auth0id_not: String

  """All values that are contained in given list."""
  auth0id_in: [String!]

  """All values that are not contained in given list."""
  auth0id_not_in: [String!]

  """All values less than the given value."""
  auth0id_lt: String

  """All values less than or equal the given value."""
  auth0id_lte: String

  """All values greater than the given value."""
  auth0id_gt: String

  """All values greater than or equal the given value."""
  auth0id_gte: String

  """All values containing the given string."""
  auth0id_contains: String

  """All values not containing the given string."""
  auth0id_not_contains: String

  """All values starting with the given string."""
  auth0id_starts_with: String

  """All values not starting with the given string."""
  auth0id_not_starts_with: String

  """All values ending with the given string."""
  auth0id_ends_with: String

  """All values not ending with the given string."""
  auth0id_not_ends_with: String
  visible: Boolean

  """All values that are not equal to given value."""
  visible_not: Boolean
  anonymous: Boolean

  """All values that are not equal to given value."""
  anonymous_not: Boolean
  teams_every: TeamMembersWhereInput
  teams_some: TeamMembersWhereInput
  teams_none: TeamMembersWhereInput
  profile: MemberProfileWhereInput
}

input MemberWhereUniqueInput {
  id: ID
  auth0id: String
}

type Mutation {
  createTeam(data: TeamCreateInput!): Team!
  createTeamMembers(data: TeamMembersCreateInput!): TeamMembers!
  createTeamProfile(data: TeamProfileCreateInput!): TeamProfile!
  createMemberProfile(data: MemberProfileCreateInput!): MemberProfile!
  createMember(data: MemberCreateInput!): Member!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateTeamMembers(data: TeamMembersUpdateInput!, where: TeamMembersWhereUniqueInput!): TeamMembers
  updateTeamProfile(data: TeamProfileUpdateInput!, where: TeamProfileWhereUniqueInput!): TeamProfile
  updateMemberProfile(data: MemberProfileUpdateInput!, where: MemberProfileWhereUniqueInput!): MemberProfile
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeamMembers(where: TeamMembersWhereUniqueInput!): TeamMembers
  deleteTeamProfile(where: TeamProfileWhereUniqueInput!): TeamProfile
  deleteMemberProfile(where: MemberProfileWhereUniqueInput!): MemberProfile
  deleteMember(where: MemberWhereUniqueInput!): Member
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertTeamMembers(where: TeamMembersWhereUniqueInput!, create: TeamMembersCreateInput!, update: TeamMembersUpdateInput!): TeamMembers!
  upsertTeamProfile(where: TeamProfileWhereUniqueInput!, create: TeamProfileCreateInput!, update: TeamProfileUpdateInput!): TeamProfile!
  upsertMemberProfile(where: MemberProfileWhereUniqueInput!, create: MemberProfileCreateInput!, update: MemberProfileUpdateInput!): MemberProfile!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  updateManyTeamMemberses(data: TeamMembersUpdateInput!, where: TeamMembersWhereInput): BatchPayload!
  updateManyTeamProfiles(data: TeamProfileUpdateInput!, where: TeamProfileWhereInput): BatchPayload!
  updateManyMemberProfiles(data: MemberProfileUpdateInput!, where: MemberProfileWhereInput): BatchPayload!
  updateManyMembers(data: MemberUpdateInput!, where: MemberWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyTeamMemberses(where: TeamMembersWhereInput): BatchPayload!
  deleteManyTeamProfiles(where: TeamProfileWhereInput): BatchPayload!
  deleteManyMemberProfiles(where: MemberProfileWhereInput): BatchPayload!
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamMemberses(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers]!
  teamProfiles(where: TeamProfileWhereInput, orderBy: TeamProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamProfile]!
  memberProfiles(where: MemberProfileWhereInput, orderBy: MemberProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MemberProfile]!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  team(where: TeamWhereUniqueInput!): Team
  teamMembers(where: TeamMembersWhereUniqueInput!): TeamMembers
  teamProfile(where: TeamProfileWhereUniqueInput!): TeamProfile
  memberProfile(where: MemberProfileWhereUniqueInput!): MemberProfile
  member(where: MemberWhereUniqueInput!): Member
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  teamMembersesConnection(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamMembersConnection!
  teamProfilesConnection(where: TeamProfileWhereInput, orderBy: TeamProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamProfileConnection!
  memberProfilesConnection(where: MemberProfileWhereInput, orderBy: MemberProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberProfileConnection!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

type Subscription {
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  teamMembers(where: TeamMembersSubscriptionWhereInput): TeamMembersSubscriptionPayload
  teamProfile(where: TeamProfileSubscriptionWhereInput): TeamProfileSubscriptionPayload
  memberProfile(where: MemberProfileSubscriptionWhereInput): MemberProfileSubscriptionPayload
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
}

type Team implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  slug: String!
  owner(where: MemberWhereInput): Member!
  profile(where: TeamProfileWhereInput): TeamProfile
  members(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers!]
  anonymous: Boolean!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  slug: String!
  anonymous: Boolean
  owner: MemberCreateOneInput!
  profile: TeamProfileCreateOneInput
  members: TeamMembersCreateManyWithoutTeamInput
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembersInput {
  name: String!
  slug: String!
  anonymous: Boolean
  owner: MemberCreateOneInput!
  profile: TeamProfileCreateOneInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

type TeamMembers implements Node {
  id: ID!
  member(where: MemberWhereInput): Member
  team(where: TeamWhereInput): Team
  role: Role
}

"""A connection to a list of items."""
type TeamMembersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamMembersEdge]!
  aggregate: AggregateTeamMembers!
}

input TeamMembersCreateInput {
  role: Role
  member: MemberCreateOneWithoutTeamsInput
  team: TeamCreateOneWithoutMembersInput
}

input TeamMembersCreateManyWithoutMemberInput {
  create: [TeamMembersCreateWithoutMemberInput!]
  connect: [TeamMembersWhereUniqueInput!]
}

input TeamMembersCreateManyWithoutTeamInput {
  create: [TeamMembersCreateWithoutTeamInput!]
  connect: [TeamMembersWhereUniqueInput!]
}

input TeamMembersCreateWithoutMemberInput {
  role: Role
  team: TeamCreateOneWithoutMembersInput
}

input TeamMembersCreateWithoutTeamInput {
  role: Role
  member: MemberCreateOneWithoutTeamsInput
}

"""An edge in a connection."""
type TeamMembersEdge {
  """The item at the end of the edge."""
  node: TeamMembers!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamMembersOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamMembersPreviousValues {
  id: ID!
  role: Role
}

type TeamMembersSubscriptionPayload {
  mutation: MutationType!
  node: TeamMembers
  updatedFields: [String!]
  previousValues: TeamMembersPreviousValues
}

input TeamMembersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMembersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMembersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMembersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamMembersWhereInput
}

input TeamMembersUpdateInput {
  role: Role
  member: MemberUpdateOneWithoutTeamsInput
  team: TeamUpdateOneWithoutMembersInput
}

input TeamMembersUpdateManyWithoutMemberInput {
  create: [TeamMembersCreateWithoutMemberInput!]
  connect: [TeamMembersWhereUniqueInput!]
  disconnect: [TeamMembersWhereUniqueInput!]
  delete: [TeamMembersWhereUniqueInput!]
  update: [TeamMembersUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [TeamMembersUpsertWithWhereUniqueWithoutMemberInput!]
}

input TeamMembersUpdateManyWithoutTeamInput {
  create: [TeamMembersCreateWithoutTeamInput!]
  connect: [TeamMembersWhereUniqueInput!]
  disconnect: [TeamMembersWhereUniqueInput!]
  delete: [TeamMembersWhereUniqueInput!]
  update: [TeamMembersUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TeamMembersUpsertWithWhereUniqueWithoutTeamInput!]
}

input TeamMembersUpdateWithoutMemberDataInput {
  role: Role
  team: TeamUpdateOneWithoutMembersInput
}

input TeamMembersUpdateWithoutTeamDataInput {
  role: Role
  member: MemberUpdateOneWithoutTeamsInput
}

input TeamMembersUpdateWithWhereUniqueWithoutMemberInput {
  where: TeamMembersWhereUniqueInput!
  data: TeamMembersUpdateWithoutMemberDataInput!
}

input TeamMembersUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamMembersWhereUniqueInput!
  data: TeamMembersUpdateWithoutTeamDataInput!
}

input TeamMembersUpsertWithWhereUniqueWithoutMemberInput {
  where: TeamMembersWhereUniqueInput!
  update: TeamMembersUpdateWithoutMemberDataInput!
  create: TeamMembersCreateWithoutMemberInput!
}

input TeamMembersUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamMembersWhereUniqueInput!
  update: TeamMembersUpdateWithoutTeamDataInput!
  create: TeamMembersCreateWithoutTeamInput!
}

input TeamMembersWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMembersWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMembersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMembersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  member: MemberWhereInput
  team: TeamWhereInput
}

input TeamMembersWhereUniqueInput {
  id: ID
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  anonymous_ASC
  anonymous_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  slug: String!
  anonymous: Boolean!
}

type TeamProfile implements Node {
  id: ID!
  createdAt: DateTime!
  description: String
  motto: String
  avatar: String
}

"""A connection to a list of items."""
type TeamProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamProfileEdge]!
  aggregate: AggregateTeamProfile!
}

input TeamProfileCreateInput {
  description: String
  motto: String
  avatar: String
}

input TeamProfileCreateOneInput {
  create: TeamProfileCreateInput
  connect: TeamProfileWhereUniqueInput
}

"""An edge in a connection."""
type TeamProfileEdge {
  """The item at the end of the edge."""
  node: TeamProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamProfileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  motto_ASC
  motto_DESC
  avatar_ASC
  avatar_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamProfilePreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String
  motto: String
  avatar: String
}

type TeamProfileSubscriptionPayload {
  mutation: MutationType!
  node: TeamProfile
  updatedFields: [String!]
  previousValues: TeamProfilePreviousValues
}

input TeamProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamProfileWhereInput
}

input TeamProfileUpdateDataInput {
  description: String
  motto: String
  avatar: String
}

input TeamProfileUpdateInput {
  description: String
  motto: String
  avatar: String
}

input TeamProfileUpdateOneInput {
  create: TeamProfileCreateInput
  connect: TeamProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamProfileUpdateDataInput
  upsert: TeamProfileUpsertNestedInput
}

input TeamProfileUpsertNestedInput {
  update: TeamProfileUpdateDataInput!
  create: TeamProfileCreateInput!
}

input TeamProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  motto: String

  """All values that are not equal to given value."""
  motto_not: String

  """All values that are contained in given list."""
  motto_in: [String!]

  """All values that are not contained in given list."""
  motto_not_in: [String!]

  """All values less than the given value."""
  motto_lt: String

  """All values less than or equal the given value."""
  motto_lte: String

  """All values greater than the given value."""
  motto_gt: String

  """All values greater than or equal the given value."""
  motto_gte: String

  """All values containing the given string."""
  motto_contains: String

  """All values not containing the given string."""
  motto_not_contains: String

  """All values starting with the given string."""
  motto_starts_with: String

  """All values not starting with the given string."""
  motto_not_starts_with: String

  """All values ending with the given string."""
  motto_ends_with: String

  """All values not ending with the given string."""
  motto_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
}

input TeamProfileWhereUniqueInput {
  id: ID
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  name: String
  slug: String
  anonymous: Boolean
  owner: MemberUpdateOneInput
  profile: TeamProfileUpdateOneInput
  members: TeamMembersUpdateManyWithoutTeamInput
}

input TeamUpdateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
}

input TeamUpdateWithoutMembersDataInput {
  name: String
  slug: String
  anonymous: Boolean
  owner: MemberUpdateOneInput
  profile: TeamProfileUpdateOneInput
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  anonymous: Boolean

  """All values that are not equal to given value."""
  anonymous_not: Boolean
  owner: MemberWhereInput
  profile: TeamProfileWhereInput
  members_every: TeamMembersWhereInput
  members_some: TeamMembersWhereInput
  members_none: TeamMembersWhereInput
}

input TeamWhereUniqueInput {
  id: ID
  name: String
  slug: String
}
